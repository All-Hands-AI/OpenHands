ARG OPENHANDS_BUILD_VERSION=dev
FROM node:21.7.2-bookworm-slim AS frontend-builder

WORKDIR /app

COPY ./frontend/package.json frontend/package-lock.json ./
RUN npm install -g npm@10.5.1
RUN npm ci

COPY ./frontend ./
RUN npm run build

FROM python:3.12.3-slim AS backend-builder

WORKDIR /app
ENV PYTHONPATH='/app'

ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

RUN apt-get update -y \
    && apt-get install -y curl make git build-essential \
    && python3 -m pip install poetry==1.8.2  --break-system-packages

COPY ./pyproject.toml ./poetry.lock ./
RUN touch README.md
RUN export POETRY_CACHE_DIR && poetry install --no-root && rm -rf $POETRY_CACHE_DIR

FROM python:3.12.3-slim AS openhands-railway

WORKDIR /app

ARG OPENHANDS_BUILD_VERSION #re-declare for this section

# Railway-specific environment variables
ENV RUN_AS_OPENHANDS=true
ENV OPENHANDS_USER_ID=42420
ENV RUNTIME=local
ENV OPENHANDS_BUILD_VERSION=$OPENHANDS_BUILD_VERSION
ENV FILE_STORE=local
ENV FILE_STORE_PATH=/.openhands-state
ENV SKIP_DEPENDENCY_CHECK=1

# Create necessary directories
RUN mkdir -p $FILE_STORE_PATH
RUN mkdir -p /var/log

# Install system dependencies including Poetry
RUN apt-get update -y \
    && apt-get install -y \
        curl \
        bash \
        sudo \
        git \
        openssh-client \
        build-essential \
        tmux \
    && rm -rf /var/lib/apt/lists/* \
    && python3 -m pip install poetry==1.8.2 --break-system-packages

# Create app group and openhands user
RUN groupadd app
RUN useradd -u $OPENHANDS_USER_ID -s /bin/bash -m openhands && \
    usermod -a -G app openhands && \
    usermod -a -G sudo openhands && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set ownership and permissions
RUN chown -R openhands:app /app && chmod -R 770 /app
RUN chown -R openhands:app $FILE_STORE_PATH && chmod -R 770 $FILE_STORE_PATH

# Switch to openhands user
USER openhands

ENV VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH='/app'

# Copy Python virtual environment from builder
COPY --chown=openhands:app --chmod=770 --from=backend-builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# Copy application code
COPY --chown=openhands:app --chmod=770 ./microagents ./microagents
COPY --chown=openhands:app --chmod=770 ./openhands ./openhands
COPY --chown=openhands:app --chmod=777 ./openhands/runtime/plugins ./openhands/runtime/plugins
COPY --chown=openhands:app --chmod=770 ./openhands/agenthub ./openhands/agenthub
COPY --chown=openhands:app ./pyproject.toml ./pyproject.toml
COPY --chown=openhands:app ./poetry.lock ./poetry.lock
COPY --chown=openhands:app ./README.md ./README.md
COPY --chown=openhands:app ./MANIFEST.in ./MANIFEST.in
COPY --chown=openhands:app ./LICENSE ./LICENSE

# This is run as "openhands" user, and will create __pycache__ with openhands:openhands ownership
RUN $VIRTUAL_ENV/bin/python openhands/core/download.py # No-op to download assets
# Add this line to set group ownership of all files/directories not already in "app" group
# openhands:openhands -> openhands:app
RUN find /app \! -group app -exec chgrp app {} + 2>/dev/null || true

# Copy and run the runtime setup script
COPY --chown=openhands:app --chmod=770 ./scripts/railway-setup.sh ./scripts/railway-setup.sh

# Copy frontend build
COPY --chown=openhands:app --chmod=770 --from=frontend-builder /app/build ./frontend/build

# Switch back to root for runtime setup
USER root

# Run the runtime setup script to pre-build and configure the runtime
RUN bash /app/scripts/railway-setup.sh

# Set up proper permissions
RUN chmod 755 /var/log

# Switch back to openhands user for runtime
USER openhands

# Expose the port (Railway will set PORT environment variable dynamically)
EXPOSE 3000

# Health check for Railway
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT:-3000}/health || exit 1

WORKDIR /app

# Run OpenHands with pre-built runtime
CMD ["/app/.openhands-runtime/start-runtime.sh"]
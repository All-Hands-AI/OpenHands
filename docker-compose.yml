services:
  # Devin Out-of-The-Box Agent Service
  devin:
    container_name: devin_api
    hostname: devin-api
    image: lehcode/opendevin_api-cuda${CUDA_VERSION:?}-miniconda:dev
    pull_policy: always
    # Override the default models and rebuild image with restart container then
    # These arguments will override defaults
    # command: "[-m <your_model_name>] [-e <your_embeddings_model_name>]"
    build:
      dockerfile: docker/devin/app/Dockerfile
      args:
        debug: ${DEBUG:-}
        conda_dir: /var/miniconda
        cuda_version: ${CUDA_VERSION:?}
        cuda_driver_branch: ${CUDA_DRIVER_BRANCH:?}
        app_root: ${APP_ROOT:?}
        venv_name: ${VENV_NAME:?}
        locale: ${LANG:?}
        timezone: ${TZ:?}
        devin_api_port: ${DEVIN_API_PORT:?}
        ubuntu_tag: ${UBUNTU_TAG:?}
        dev_mode: ${DEV_MODE}
    env_file:
      - ./.env
      - docker/devin/app/.env
    environment:
      - SANDBOX_USER_ID=1001
      - WORKSPACE_MOUNT_PATH=${HOST_WORKSPACE_DIR:?}
      - PYDEVD_DISABLE_FILE_VALIDATION=1
    networks:
      litellm_proxy_net:
        ipv4_address: ${DEVIN_IP:?}
    extra_hosts:
      - host.docker.internal=host-gateway
    volumes:
      - conda_vol:${CONDA_ROOT:?}
      - /var/run/docker.sock:/var/run/docker.sock
      # Code workspace
      - ${HOST_WORKSPACE_DIR:?}:/opt/workspace_base
      # Bind mounts for development
      - ./agenthub:${APP_ROOT}/agenthub
      - ./dev_config:${APP_ROOT}/dev_config
      - ./evaluation:${APP_ROOT}/evaluation
      - ./opendevin:${APP_ROOT}/opendevin
      - ./tests:${APP_ROOT}/tests
      - ./pyproject.toml:${APP_ROOT}/pyproject.toml:ro
      - ./poetry.lock:${APP_ROOT}/poetry.lock
      - ./environment.yml:${APP_ROOT}/environment.yml
      - ./frontend/dist:${APP_ROOT}/frontend/dist
    tmpfs:
      - /run
      - /tmp
      - /var/run
    ports:
      - "${DEVIN_API_PORT}:${DEVIN_API_PORT}"
      # VSCode Python remote debugger
      - "5678:5678"
    tty: true
    restart: on-failure
    entrypoint: /docker-entrypoint.sh
    deploy:
      resources:
        reservations:
          devices:
            - driver: "nvidia"
              count: 1
              capabilities: [ "gpu" ]
    healthcheck:
      test: [ "CMD", "curl", "-L", "http://127.0.0.1:${DEVIN_API_PORT:?}" ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 2m

  # UI service
  web_ui:
    container_name: devin_web
    hostname: devin_web
    image: lehcode/opendevin_ui-node${NODE_VERSION:?}-npm${NPM_VERSION}-pnpm-reactjs:dev
    pull_policy: always
    build:
      dockerfile: docker/devin/web_ui/${UI_BUILD_DOCKERFILE:?}
      args:
        - node_version=${NODE_VERSION:?}
        - npm_version=${NPM_VERSION:?}
        - node_env=${NODE_ENV:?}
        - debug=${DEBUG}
        - node_options=${NODE_OPTIONS}
        - frontend_port=${UI_HTTP_PORT:?}
        - dev_mode=${DEV_MODE}
        - backend_host=${DEVIN_IP:?}:${DEVIN_API_PORT:?}
    env_file:
      - ./.env
#      - docker/devin/web_ui/.env
    environment:
      - VITE_USE_TLS=false
      - VITE_INSECURE_SKIP_VERIFY=false
      - VITE_BACKEND_HOST=${DEVIN_IP:?}:${DEVIN_API_PORT:?}
#      - FRONTEND_PORT=${UI_HTTP_PORT:?}
      - LLM_PROXY_HOST=litellm
      - LLM_PROXY_PORT=${LITELLM_PORT:?}
    networks:
      litellm_proxy_net:
    ports:
      - "${UI_HTTP_PORT:?}:${UI_HTTP_PORT:?}"
      - "${UI_HTTPS_PORT:?}:${UI_HTTPS_PORT:?}"
    tty: true
    volumes:
      - ./docker/openssl.cnf:/etc/ssl/od_openssl.cnf
#      - ./docker/nginx/nginx.conf.dist:/etc/nginx/nginx.conf
      - ./frontend/dist:/opt/opendevin/ui/build/dist
    depends_on:
      - devin

networks:
  litellm_proxy_net:
    external: true
    name: litellm_llm_services_net

volumes:
  root_dir_vol:
  conda_vol:

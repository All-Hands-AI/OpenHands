name: End-to-End Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:

# If triggered by a PR, it will be in the same group
concurrency:
  group: ${{ github.workflow }}-${{ (github.head_ref && github.ref) || github.run_id }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    if: contains(github.event.pull_request.labels.*.name, 'end-to-end') || github.event_name == 'workflow_dispatch'
    runs-on: blacksmith-4vcpu-ubuntu-2204
    timeout-minutes: 30

    env:
      RUNTIME: local
      INSTALL_DOCKER: 0  # Skip Docker installation, use existing Docker
      FRONTEND_PORT: 12000
      FRONTEND_HOST: 0.0.0.0
      BACKEND_HOST: 0.0.0.0
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
      LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install prerequisites for make build
        run: |
          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 netcat-openbsd tmux software-properties-common

          # Install Python 3.12 from deadsnakes PPA
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.12 python3.12-dev python3.12-venv python3.12-distutils

          # Install pip for Python 3.12
          curl -sS https://bootstrap.pypa.io/get-pip.py | sudo python3.12

          # Install poetry via pipx
          python3.12 -m pip install pipx
          python3.12 -m pipx ensurepath
          python3.12 -m pipx install poetry

          # Set up Node.js
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Setup workspace for end-to-end tests
        run: |
          # Create workspace directory structure that the runner can write to
          mkdir -p /tmp/openhands-workspace/.downloads
          chmod -R 755 /tmp/openhands-workspace

          # Also create the actual /workspace directory for browser environment
          sudo mkdir -p /workspace/.downloads
          sudo chown -R $(id -u):$(id -g) /workspace
          sudo chmod -R 755 /workspace

      - name: Build OpenHands
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          INSTALL_DOCKER: 0
          RUNTIME: local
        run: |
          # Build OpenHands using make build
          make build > /tmp/openhands-e2e-build.log 2>&1

          # Start OpenHands in the background
          make run FRONTEND_PORT=12000 FRONTEND_HOST=0.0.0.0 BACKEND_HOST=0.0.0.0 &> /tmp/openhands-e2e-test.log &

          # Wait for the application to start
          echo "Waiting for OpenHands to start..."
          sleep 90

          # Check if the application is running
          if nc -z localhost 12000; then
            echo "OpenHands is running on port 12000"
          else
            echo "Warning: Could not connect to OpenHands frontend on port 12000"
            echo "Waiting additional time..."
            sleep 30
            if ! nc -z localhost 12000; then
              echo "Error: OpenHands failed to start"
              exit 1
            fi
          fi

      - name: Run end-to-end tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          SANDBOX_VOLUMES: /tmp/openhands-workspace:/workspace:rw
          SANDBOX_USER_ID: 1000
          SANDBOX_RUNTIME: local
          INSTALL_DOCKER: 0
          RUNTIME: local
          FRONTEND_PORT: 12000
          FRONTEND_HOST: 0.0.0.0
          BACKEND_HOST: 0.0.0.0
          BACKEND_PORT: 3000
        run: |
          cd tests/e2e && poetry run python -m pytest test_workflow.py::test_openhands_workflow -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/e2e/test-results/
          retention-days: 30

      - name: Upload OpenHands logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-logs
          path: |
            /tmp/openhands-e2e-test.log
            /tmp/openhands-e2e-build.log
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Stop OpenHands
          pkill -f "make run" || true
          pkill -f "python -m openhands" || true

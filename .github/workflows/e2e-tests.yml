name: End-to-End Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  e2e-tests:
    if: contains(github.event.pull_request.labels.*.name, 'end-to-end') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      GITHUB_REPO_NAME: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install poetry via pipx
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 2.1.3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 xauth xvfb libgbm1 libasound2t64 netcat-openbsd

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Setup environment for end-to-end tests
        run: |
          # Create test results directory
          mkdir -p test-results

          # Create downloads directory for OpenHands (use a directory in the home folder)
          mkdir -p $HOME/downloads
          sudo chown -R $USER:$USER $HOME/downloads
          sudo chmod -R 755 $HOME/downloads

      - name: Build OpenHands
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          INSTALL_DOCKER: 1
          RUNTIME: docker
          FRONTEND_PORT: 12000
          FRONTEND_HOST: 0.0.0.0
          BACKEND_HOST: 0.0.0.0
          BACKEND_PORT: 3000
          ENABLE_BROWSER: true
          INSTALL_PLAYWRIGHT: 1
          VITE_BACKEND_BASE_URL: 127.0.0.1:3000
        run: |
          # Fix poetry.lock file if needed
          echo "Fixing poetry.lock file if needed..."
          poetry lock

          # Build OpenHands using make build with production frontend target (VITE_BACKEND_BASE_URL embedded)
          echo "Running make build (production frontend)..."
          make build

          # Install Chromium Headless Shell for Playwright (needed for pytest-playwright)
          echo "Installing Chromium Headless Shell for Playwright..."
          poetry run playwright install chromium-headless-shell

          # Verify Playwright browsers are installed (for e2e tests only)
          echo "Verifying Playwright browsers installation for e2e tests..."
          BROWSER_CHECK=$(poetry run python tests/e2e/check_playwright.py 2>/dev/null)

          if [ "$BROWSER_CHECK" != "chromium_found" ]; then
            echo "ERROR: Chromium browser not found or not working for e2e tests"
            echo "$BROWSER_CHECK"
            exit 1
          else
            echo "Playwright browsers are properly installed for e2e tests."
          fi

          # Start backend (FastAPI/Uvicorn)
          echo "Starting OpenHands backend (Uvicorn)..."
          export PYTHONUNBUFFERED=1
          export LOG_LEVEL=WARNING
          export UVICORN_LOG_LEVEL=warning
          export OPENHANDS_LOG_LEVEL=WARNING
          poetry run uvicorn openhands.server.listen:app --host 0.0.0.0 --port 3000 > /tmp/openhands-backend.log 2>&1 &
          BACKEND_PID=$!

          # Wait for backend to be healthy
          echo "Waiting for backend to be ready on :3000..."
          max_attempts=30
          attempt=1
          until nc -z localhost 3000 && curl -s http://localhost:3000/health | grep -qi "ok"; do
            if ! ps -p $BACKEND_PID > /dev/null; then
              echo "ERROR: Backend process terminated unexpectedly"
              tail -n 50 /tmp/openhands-backend.log || true
              exit 1
            fi
            echo "Backend not ready yet (attempt $attempt/$max_attempts)..."
            tail -n 10 /tmp/openhands-backend.log || true
            sleep 5
            attempt=$((attempt + 1))
            if [ $attempt -gt $max_attempts ]; then
              echo "ERROR: Backend failed to start"
              tail -n 100 /tmp/openhands-backend.log || true
              exit 1
            fi
          done
          echo "Backend is ready."

          # Serve production frontend (static)
          echo "Starting frontend (production build via sirv) on :12000..."
          pushd frontend >/dev/null
          npm run start -- -p 12000 -H 0.0.0.0 > /tmp/openhands-frontend.log 2>&1 &
          FRONTEND_PID=$!
          popd >/dev/null

          # Wait for frontend to serve HTML
          echo "Waiting for frontend to be ready on :12000..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if ! ps -p $FRONTEND_PID > /dev/null; then
              echo "ERROR: Frontend process terminated unexpectedly"
              tail -n 50 /tmp/openhands-frontend.log || true
              exit 1
            fi
            if nc -z localhost 12000 && curl -s http://localhost:12000 | grep -q "<html"; then
              echo "SUCCESS: Frontend is serving HTML on port 12000"
              break
            fi
            echo "Frontend not ready yet (attempt $attempt/$max_attempts)..."
            tail -n 10 /tmp/openhands-frontend.log || true
            sleep 5
            attempt=$((attempt + 1))
            if [ $attempt -gt $max_attempts ]; then
              echo "ERROR: Frontend failed to start"
              tail -n 100 /tmp/openhands-frontend.log || true
              exit 1
            fi
          done

          # Final verification
          curl -s http://localhost:12000 >/dev/null || { echo "ERROR: Frontend check failed"; exit 1; }
          echo "OpenHands (prod frontend + backend) is running successfully."

      - name: Run end-to-end tests
        env:
          GITHUB_TOKEN: ${{ secrets.E2E_TEST_GITHUB_TOKEN }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
        run: |
          # Check if the application is running
          if ! nc -z localhost 12000; then
            echo "ERROR: OpenHands is not running on port 12000"
            echo "Last 50 lines of the log:"
            tail -n 50 /tmp/openhands-e2e-test.log
            exit 1
          fi

          # Run the tests with detailed output
          cd tests/e2e
          poetry run python -m pytest test_e2e_workflow.py::test_github_token_configuration test_e2e_workflow.py::test_conversation_start -v --no-header --capture=no --timeout=600

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/e2e/test-results/
          retention-days: 30

      - name: Upload OpenHands logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-logs
          path: |
            /tmp/openhands-e2e-test.log
            /tmp/openhands-e2e-build.log
            /tmp/openhands-backend.log
            /tmp/openhands-frontend.log
            /tmp/backend-health-check.log
            /tmp/frontend-check.log
            /tmp/vite-config.log
            /tmp/makefile-contents.log
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Stop OpenHands processes
          echo "Stopping OpenHands processes..."
          pkill -f "uvicorn openhands.server.listen:app" || true
          pkill -f "sirv" || true
          pkill -f "python -m openhands.server" || true
          pkill -f "npm run dev" || true
          pkill -f "make run" || true

          # Print process status for debugging
          echo "Checking if any OpenHands processes are still running:"
          ps aux | grep -E "uvicorn|sirv|openhands|npm run dev" || true

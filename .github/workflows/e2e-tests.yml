name: End-to-End Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  e2e-tests:
    if: contains(github.event.pull_request.labels.*.name, 'end-to-end') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      GITHUB_REPO_NAME: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install poetry via pipx
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: 2.1.3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 xauth xvfb libgbm1 libasound2t64 netcat-openbsd

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Setup environment for end-to-end tests
        run: |
          # Create test results directory
          mkdir -p tests/e2e/test-results

          # Create downloads directory for OpenHands (use a directory in the home folder)
          mkdir -p $HOME/downloads
          sudo chown -R $USER:$USER $HOME/downloads
          sudo chmod -R 755 $HOME/downloads

      - name: Build OpenHands
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'gpt-4o' }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || 'test-key' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          INSTALL_DOCKER: 0
          RUNTIME: local
          FRONTEND_PORT: 12000
          FRONTEND_HOST: 0.0.0.0
          BACKEND_HOST: 0.0.0.0
          BACKEND_PORT: 3000
          BROWSER_DOWNLOADS_PATH: $HOME/downloads
          PLAYWRIGHT_BROWSERS_PATH: $HOME/.cache/ms-playwright
          DISABLE_SANDBOX: true
          ENABLE_BROWSER: false
          INSTALL_PLAYWRIGHT: 1
        run: |
          # Check the Makefile to understand what make build and make run do
          echo "Checking Makefile contents:"
          if [ -f "Makefile" ]; then
            cat Makefile > /tmp/makefile-contents.log
            echo "Makefile found, checking build and run targets:"
            grep -A 10 "build:" Makefile || echo "No build target found"
            grep -A 10 "run:" Makefile || echo "No run target found"
          else
            echo "ERROR: Makefile not found!"
            find . -name "Makefile" | head -n 5
          fi

          # Fix poetry.lock file if needed
          echo "Fixing poetry.lock file if needed..."
          poetry lock

          # Build OpenHands using make build
          echo "Running make build..."
          make build > /tmp/openhands-e2e-build.log 2>&1 || echo "make build failed with exit code $?"

          # Create a basic config.toml file
          echo "Creating basic config.toml file..."
          echo '[core]' > config.toml
          echo "enable_browser = false" >> config.toml
          echo "runtime = \"local\"" >> config.toml
          echo '[sandbox]' >> config.toml
          echo "volumes=\"$HOME/downloads:/tmp/downloads:rw\"" >> config.toml
          mkdir -p $HOME/downloads
          chmod -R 777 $HOME/downloads
          cat config.toml

          # Print current directory for debugging
          echo "Current directory: $(pwd)"
          echo "Listing top-level directories:"
          ls -la

          # Check frontend configuration
          echo "Checking frontend configuration..."
          if [ -d "frontend" ]; then
            cat frontend/.env 2>/dev/null || echo "No .env file found"
            cat frontend/vite.config.ts > /tmp/vite-config.log 2>/dev/null || echo "No vite.config.ts found"
          else
            echo "ERROR: frontend directory not found!"
            find . -type d -name "frontend" | head -n 5
          fi

          # Find and activate the poetry virtual environment
          echo "Finding and activating the poetry virtual environment..."
          VENV_PATH=$(poetry env info -p)
          echo "Virtual environment path: $VENV_PATH"
          source $VENV_PATH/bin/activate
          
          # Verify Playwright browsers are installed
          echo "Verifying Playwright browsers installation..."
          if [ -d "$HOME/.cache/ms-playwright" ]; then
            echo "Playwright browsers directory exists at $HOME/.cache/ms-playwright"
            ls -la $HOME/.cache/ms-playwright
          else
            echo "WARNING: Playwright browsers directory not found. Installing Playwright browsers now..."
            # Install Playwright browsers directly
            poetry run playwright install --with-deps chromium
          fi

          # Start the application using make run with custom parameters
          echo "Starting OpenHands using make run..."
          make run BACKEND_HOST=$BACKEND_HOST BACKEND_PORT=$BACKEND_PORT FRONTEND_HOST=$FRONTEND_HOST FRONTEND_PORT=$FRONTEND_PORT > /tmp/openhands-e2e-test.log 2>&1 &

          # Wait a bit for the application to start
          sleep 10

          # Check if backend is reachable
          echo "Checking if backend is reachable..."
          curl -v http://$BACKEND_HOST:$BACKEND_PORT/api/health > /tmp/backend-health-check.log 2>&1 || echo "Backend health check failed"
          cat /tmp/backend-health-check.log

          # Check if frontend is reachable
          echo "Checking if frontend is reachable..."
          curl -v http://$FRONTEND_HOST:$FRONTEND_PORT > /tmp/frontend-check.log 2>&1 || echo "Frontend check failed"
          cat /tmp/frontend-check.log

          # Wait for the application to start with active polling
          echo "Waiting for OpenHands to start..."

          # Set up polling parameters
          max_attempts=20
          wait_time=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Checking if OpenHands is running (attempt $attempt of $max_attempts)..."

            # Check if port is open
            if nc -z localhost $FRONTEND_PORT; then
              # Check if we get a proper HTML response
              if curl -s http://localhost:$FRONTEND_PORT | grep -q "<html"; then
                echo "SUCCESS: OpenHands is running and responding on port $FRONTEND_PORT"

                # Try to get the page title for additional verification
                page_title=$(curl -s http://localhost:$FRONTEND_PORT | grep -o "<title>.*</title>" || echo "No title found")
                echo "Page title: $page_title"
                break
              else
                echo "Port $FRONTEND_PORT is open but not returning HTML content yet"
              fi
            else
              echo "Port $FRONTEND_PORT is not open yet"
            fi

            # Show recent log output every 3 attempts
            if [ $((attempt % 3)) -eq 0 ]; then
              echo "Recent log output:"
              tail -n 20 /tmp/openhands-e2e-test.log
            fi

            # Check for permission denied errors related to workspace
            if grep -q "EACCES: permission denied, mkdir '/workspace'" /tmp/openhands-e2e-test.log; then
              echo "ERROR: Fatal error detected - Permission denied error for /workspace directory"
              echo "Last 50 lines of the log:"
              tail -n 50 /tmp/openhands-e2e-test.log
              exit 1
            fi

            # Check for other common fatal errors
            if grep -q "Error: Cannot find module" /tmp/openhands-e2e-test.log ||
               grep -q "ModuleNotFoundError" /tmp/openhands-e2e-test.log ||
               grep -q "ImportError" /tmp/openhands-e2e-test.log ||
               grep -q "Fatal error" /tmp/openhands-e2e-test.log; then
              echo "ERROR: Fatal error detected in application startup"
              echo "Last 50 lines of the log:"
              tail -n 50 /tmp/openhands-e2e-test.log
              exit 1
            fi

            # Check if we've reached the maximum number of attempts
            if [ $attempt -eq $max_attempts ]; then
              echo "ERROR: OpenHands failed to start after $max_attempts attempts"
              echo "Last 50 lines of the log:"
              tail -n 50 /tmp/openhands-e2e-test.log
              exit 1
            fi

            # Wait before next attempt
            echo "Waiting $wait_time seconds before next check..."
            sleep $wait_time
            attempt=$((attempt + 1))
          done

      - name: Run end-to-end tests
        run: |
          # Install Playwright browsers directly before running tests
          echo "Installing Playwright browsers directly in the test step..."
          poetry run playwright install chromium
          
          # Verify Playwright browsers installation
          if [ -d "$HOME/.cache/ms-playwright" ]; then
            echo "Playwright browsers directory exists at $HOME/.cache/ms-playwright"
            ls -la $HOME/.cache/ms-playwright
          else
            echo "ERROR: Playwright browsers directory not found after installation!"
            exit 1
          fi
          
          # Run the Playwright tests
          cd tests/e2e
          poetry run python -m pytest test_workflow.py -v --browser chromium

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/e2e/test-results/
          retention-days: 30

      - name: Upload OpenHands logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: openhands-logs
          path: |
            /tmp/openhands-e2e-test.log
            /tmp/openhands-e2e-build.log
            /tmp/openhands-backend.log
            /tmp/openhands-frontend.log
            /tmp/backend-health-check.log
            /tmp/frontend-check.log
            /tmp/vite-config.log
            /tmp/makefile-contents.log
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Stop OpenHands processes
          echo "Stopping OpenHands processes..."
          pkill -f "python -m openhands.server" || true
          pkill -f "npm run dev" || true
          pkill -f "make run" || true

          # Print process status for debugging
          echo "Checking if any OpenHands processes are still running:"
          ps aux | grep -E "openhands|npm run dev" || true

# Manual workflow for testing tagged and feature branch releases before merging
# This workflow allows testing connectivity and keys for prerelease builds
name: Publish to S3

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build from (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'

concurrency:
  group: s3-release-${{ github.run_id }}
  cancel-in-progress: false

env:
  TAG: ${{ inputs.tag }}
  TAG_FOLDER: releases/${{ inputs.tag }}
  DOCKER_REGISTRY: all-hands-ai
  IMAGE_URI: ghcr.io/all-hands-ai/enterprise-server

jobs:
  publish-to-s3:
    name: Publish to S3
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull and export enterprise-server image
        run: |
          echo "Pulling enterprise-server image for tag: ${{ env.TAG }}"
          
          # Pull the image from GHCR
          docker pull ${{ env.IMAGE_URI }}:${{ env.TAG }}
          
          # Export to tarball
          docker save ${{ env.IMAGE_URI }}:${{ env.TAG }} | gzip > enterprise-server-${{ env.TAG }}.tar.gz
          
          echo "âœ… Enterprise-server image exported"
      
      - name: Prepare S3 upload
        run: |
          # S3 will automatically create the path structure when we upload the file
          echo "S3 upload path:"
          echo "  Tag folder: ${{ env.TAG_FOLDER }}"
          echo "  File: enterprise-server-${{ env.TAG }}.tar.gz"
      
      - name: Upload image to S3
        run: |
          echo "Uploading enterprise-server image to S3..."
          
          # Upload the tarball
          aws s3 cp enterprise-server-${{ env.TAG }}.tar.gz "s3://${{ vars.AWS_RELEASE_BUCKET }}/${{ env.TAG_FOLDER }}/enterprise-server-${{ env.TAG }}.tar.gz"
          
          echo "âœ… Image uploaded to S3"
      
      - name: Generate presigned URL
        id: presigned-url
        uses: ./.github/actions/generate-presigned-url
        with:
          bucket: ${{ vars.AWS_RELEASE_BUCKET }}
          key: ${{ env.TAG_FOLDER }}/enterprise-server-${{ env.TAG }}.tar.gz
          region: ${{ secrets.AWS_REGION || 'us-east-1' }}
          expires-in: '604800'
            
      - name: Create S3 publish report
        id: create-report
        uses: ./.github/actions/s3-publish-report
        with:
          tag: ${{ env.TAG }}
          bucket: ${{ vars.AWS_RELEASE_BUCKET }}
          tag-folder: ${{ env.TAG_FOLDER }}
          download-url: ${{ steps.presigned-url.outputs.presigned-url }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}
          url-length: ${{ steps.presigned-url.outputs.url-length }}
          expires-at: ${{ steps.presigned-url.outputs.expires-at }}
      
      - name: Upload HTML report artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-report-${{ env.TAG }}
          path: ${{ steps.create-report.outputs.report-path }}
      
      - name: Output build information
        run: |
          echo ""
          echo "## ðŸŽ‰ Publish to S3 Complete!"
          echo ""
          echo "**Tag**: \`${{ env.TAG }}\`"
          echo "**S3 Location**: \`s3://${{ vars.AWS_RELEASE_BUCKET }}/${{ env.TAG_FOLDER }}/\`"
          echo ""
          echo "### ðŸ“¦ Available Image:"
          echo "- \`enterprise-server-${{ env.TAG }}.tar.gz\`"
          echo ""
          echo "### ðŸ“‹ Download Information:"
          echo "- View the release report in the \`release-report-${{ env.TAG }}\` artifact"
          echo "- Report file: \`${{ steps.create-report.outputs.report-path }}\`"
          echo "- Report size: \`${{ steps.create-report.outputs.report-size }} bytes\`"
          echo "- The HTML report contains the download link and usage instructions"
          echo "- URL expires at: ${{ steps.presigned-url.outputs.expires-at }}"
          echo ""

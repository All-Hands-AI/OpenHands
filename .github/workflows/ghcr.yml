name: Build Publish and Test Runtime Image

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: true
        default: ''

jobs:
  ghcr_build:
    runs-on: ubuntu-latest

    outputs:
      tags: ${{ steps.capture-tags.outputs.tags }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image: ["sandbox", "opendevin"]
        platform: ["amd64", "arm64"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-${{ matrix.platform }}

      - name: Build and export image
        id: build
        run: |
          DOCKER_BUILDKIT=1 BUILDX_CACHE=/tmp/.buildx-cache ./containers/build.sh ${{ matrix.image }} ${{ github.repository_owner }} ${{ matrix.platform }}

      - name: Capture tags
        id: capture-tags
        run: |
          tags=$(cat tags.txt)
          echo "tags=$tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}-docker-image-${{ matrix.platform }}
          path: /tmp/${{ matrix.image }}_image_${{ matrix.platform }}.tar

  ghcr_build_runtime:
    runs-on: ubuntu-latest

    outputs:
      tags: ${{ steps.capture-tags.outputs.tags }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image: ["od_runtime"]
        base_image: ["ubuntu:22.04"]
        platform: ["amd64", "arm64"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ matrix.platform }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-${{ matrix.platform }}

      - name: Install poetry via pipx
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies

      - name: Create source distribution and Dockerfile
        run: poetry run python3 opendevin/runtime/utils/runtime_build.py --base_image ${{ matrix.base_image }} --build_folder containers/runtime

      - name: Build and export image
        id: build
        run: |
          DOCKER_BUILDKIT=1 BUILDX_CACHE=/tmp/.buildx-cache ./containers/build.sh ${{ matrix.image }} ${{ github.repository_owner }} ${{ matrix.platform }}

      - name: Capture tags
        id: capture-tags
        run: |
          tags=$(cat tags.txt)
          echo "tags=$tags"
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image }}-docker-image-${{ matrix.platform }}
          path: /tmp/${{ matrix.image }}_image_${{ matrix.platform }}.tar

  test_runtime:
    name: Test Runtime
    runs-on: ubuntu-latest
    needs: [ghcr_build_runtime, ghcr_build]
    env:
      PERSIST_SANDBOX: "false"

    strategy:
      matrix:
        runtime_type: ["eventstream", "server"]

    steps:
      - uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Install poetry via pipx
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.runtime_type == 'eventstream' && 'od_runtime' || 'sandbox' }}-docker-image-amd64
          path: /tmp/

      - name: Load Docker image and run runtime tests
        run: |
          image_file="/tmp/${{ matrix.runtime_type == 'eventstream' && 'od_runtime' || 'sandbox' }}_image_amd64.tar"
          image_name=$(docker load -i $image_file | sed -n 's/^Loaded image: //p' | head -n 1)
          echo "Loaded Docker image: $image_name"
          TEST_RUNTIME=${{ matrix.runtime_type }} SANDBOX_USER_ID=$(id -u) SANDBOX_CONTAINER_IMAGE=$image_name TEST_IN_CI=true poetry run pytest --cov=agenthub --cov=opendevin --cov-report=xml -s ./tests/unit/test_runtime.py

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration_tests_on_linux:
    name: Integration Tests on Linux
    runs-on: ubuntu-latest
    needs: ghcr_build
    env:
      PERSIST_SANDBOX: "false"
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        sandbox: ["ssh", "local"]
    steps:
      - uses: actions/checkout@v4

      - name: Install poetry via pipx
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies

      - name: Download sandbox Docker image
        uses: actions/download-artifact@v4
        with:
          name: sandbox-docker-image-amd64
          path: /tmp/

      - name: Load sandbox Docker image and run integration tests
        env:
          SANDBOX_BOX_TYPE: ${{ matrix.sandbox }}
        run: |
          image_file="/tmp/sandbox_image_amd64.tar"
          image_name=$(docker load -i $image_file | sed -n 's/^Loaded image: //p' | head -n 1)
          echo "Loaded Docker image: $image_name"
          SANDBOX_CONTAINER_IMAGE=$image_name TEST_IN_CI=true TEST_ONLY=true ./tests/integration/regenerate.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  ghcr_push:
    runs-on: ubuntu-latest
    # don't push if integration tests or sandbox tests fail
    needs: [ghcr_build, test_runtime, integration_tests_on_linux]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    env:
      tags: ${{ needs.ghcr_build.outputs.tags }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image: ["sandbox", "opendevin"]
        platform: ["amd64", "arm64"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.image }}-docker-image-${{ matrix.platform }}
          path: /tmp/${{ matrix.platform }}

      - name: Load images and push to registry
        run: |
          mv /tmp/${{ matrix.platform }}/${{ matrix.image }}_image_${{ matrix.platform }}.tar .
          loaded_image=$(docker load -i ${{ matrix.image }}_image_${{ matrix.platform }}.tar | grep "Loaded image:" | head -n 1 | awk '{print $3}')
          echo "loaded image = $loaded_image"
          tags=$(echo ${tags} | tr ' ' '\n')
          image_name=$(echo "ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}" | tr '[:upper:]' '[:lower:]')
          echo "image name = $image_name"
          for tag in $tags; do
            echo "tag = $tag"
            docker tag $loaded_image $image_name:${tag}_${{ matrix.platform }}
            docker push $image_name:${tag}_${{ matrix.platform }}
          done

  ghcr_push_runtime:
    runs-on: ubuntu-latest
    # don't push if runtime tests fail
    needs: [ghcr_build_runtime, test_runtime, integration_tests_on_linux]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    env:
      tags: ${{ needs.ghcr_build_runtime.outputs.tags }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image: ["od_runtime"]
        platform: ["amd64", "arm64"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.image }}-docker-image-${{ matrix.platform }}
          path: /tmp/${{ matrix.platform }}

      - name: List downloaded files
        run: |
          ls -la /tmp/${{ matrix.platform }}
          file /tmp/${{ matrix.platform }}/*

      - name: Load images and push to registry
        run: |
          mv /tmp/${{ matrix.platform }}/${{ matrix.image }}_image_${{ matrix.platform }}.tar ./${{ matrix.image }}_image_${{ matrix.platform }}.tar
          if ! loaded_image=$(docker load -i ${{ matrix.image }}_image_${{ matrix.platform }}.tar | grep "Loaded image:" | head -n 1 | awk '{print $3}'); then
            echo "Failed to load Docker image"
            exit 1
          fi
          echo "loaded image = $loaded_image"
          tags=$(echo ${tags} | tr ' ' '\n')
          image_name=$(echo "ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}" | tr '[:upper:]' '[:lower:]')
          echo "image name = $image_name"
          for tag in $tags; do
            echo "tag = $tag"
            if [ -n "$image_name" ]; then
              docker tag $loaded_image $image_name:${tag}_${{ matrix.platform }}
              docker push $image_name:${tag}_${{ matrix.platform }}
            else
              echo "Skipping tag and push due to empty image_name"
            fi
          done

  create_manifest:
    runs-on: ubuntu-latest
    needs: [ghcr_build, ghcr_push]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    env:
      tags: ${{ needs.ghcr_build.outputs.tags }}

    strategy:
      matrix:
        image: ["sandbox", "opendevin"]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          image_name=$(echo "ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}" | tr '[:upper:]' '[:lower:]')
          echo "image name = $image_name"
          tags=$(echo ${tags} | tr ' ' '\n')
          for tag in $tags; do
            echo 'tag = $tag'
            docker buildx imagetools create --tag $image_name:$tag \
              $image_name:${tag}_amd64 \
              $image_name:${tag}_arm64
          done

  create_manifest_runtime:
    runs-on: ubuntu-latest
    needs: [ghcr_build_runtime, ghcr_push_runtime]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    env:
      tags: ${{ needs.ghcr_build_runtime.outputs.tags }}

    strategy:
      matrix:
        image: ["od_runtime"]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        run: |
          image_name=$(echo "ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}" | tr '[:upper:]' '[:lower:]')
          echo "image name = $image_name"
          tags=$(echo ${tags} | tr ' ' '\n')
          for tag in $tags; do
            echo 'tag = $tag'
            docker buildx imagetools create --tag $image_name:$tag \
              $image_name:${tag}_amd64 \
              $image_name:${tag}_arm64
          done

name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Use home directory instead of /opt
          APP_DIR=$HOME/tradejoy
          
          # Create project directory
          mkdir -p $APP_DIR
          
          # Create/update env file
          cat > $APP_DIR/.env << EOF
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          BEDROCK_MODEL=${{ secrets.BEDROCK_MODEL }}
          WORKSPACE_BASE=$APP_DIR/workspace
          EOF
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker $USER
            
            # The group changes won't be effective until the next login session
            # For this run, we'll use sudo for docker commands
          fi
          
          # Clone or update repository
          if [ -d "$APP_DIR/CMS-Builder" ]; then
            cd $APP_DIR/CMS-Builder
            git fetch --all
            git reset --hard origin/main
          else
            cd $APP_DIR
            git clone https://github.com/${{ github.repository_owner }}/CMS-Builder.git
            cd CMS-Builder
          fi
          
          # Create workspace directory if it doesn't exist
          mkdir -p $APP_DIR/workspace
          
          # Build the Docker image locally (using sudo if docker was just installed)
          if groups | grep -q docker; then
            docker build -t tradejoy-backend:latest -f tradejoy/containers/Dockerfile .
          else
            sudo docker build -t tradejoy-backend:latest -f tradejoy/containers/Dockerfile .
          fi
          
          # Stop and remove old container if exists
          if groups | grep -q docker; then
            docker stop tradejoy-backend || true
            docker rm tradejoy-backend || true
            
            # Run new container
            docker run -d \
              --name tradejoy-backend \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file $APP_DIR/.env \
              -v $APP_DIR/workspace:/tmp/workspace \
              -v /var/run/docker.sock:/var/run/docker.sock \
              tradejoy-backend:latest
          else
            sudo docker stop tradejoy-backend || true
            sudo docker rm tradejoy-backend || true
            
            # Run new container
            sudo docker run -d \
              --name tradejoy-backend \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file $APP_DIR/.env \
              -v $APP_DIR/workspace:/tmp/workspace \
              -v /var/run/docker.sock:/var/run/docker.sock \
              tradejoy-backend:latest
          fi 
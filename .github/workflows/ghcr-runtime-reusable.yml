# Reusable workflow that builds, tests and then pushes the runtime Docker image to the ghcr.io repository
name: Build, Test and Publish Runtime Image

# Indicate that this is a reusable workflow
on:
  workflow_call:
    inputs:
      # The base_image name used to build the runtime Docker image
      base_image:
        required: true
        type: string
      # The tag to use for the built runtime Docker image
      image_tag:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true

jobs:
  # Builds the runtime Docker images
  ghcr_build_runtime:
    name: Build Image ${{ inputs.image_tag }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies
      - name: Create source distribution and Dockerfile
        run: poetry run python3 openhands/runtime/utils/runtime_build.py --base_image ${{ inputs.base_image }} --build_folder containers/runtime --force_rebuild
      - name: Build and push runtime image ${{ inputs.base_image }}
        if: "!github.event.pull_request.head.repo.fork"
        run: |
          ./containers/build.sh runtime ${{ github.repository_owner }} --push ${{ inputs.image_tag }}
      # Forked repos can't push to GHCR, so we need to upload the image as an artifact
      - name: Build runtime image ${{ inputs.base_image }} for fork
        if: "github.event.pull_request.head.repo.fork"
        uses: docker/build-push-action@v6
        with:
          tags: ghcr.io/all-hands-ai/runtime:${{ github.sha }}-${{ inputs.image_tag }}
          outputs: type=docker,dest=/tmp/runtime-${{ inputs.image_tag }}.tar
          context: containers/runtime
      - name: Upload runtime image for fork
        if: "github.event.pull_request.head.repo.fork"
        uses: actions/upload-artifact@v4
        with:
          name: runtime-${{ inputs.image_tag }}
          path: /tmp/runtime-${{ inputs.image_tag }}.tar

  # Run unit tests with the runtime Docker images
  test_runtime:
    name: Runtime Unit Tests with ${{ inputs.image_tag }}
    runs-on: ubuntu-latest
    needs: [ghcr_build_runtime]
    steps:
      - uses: actions/checkout@v4
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
      # Forked repos can't push to GHCR, so we need to download the image as an artifact
      - name: Download runtime image for fork
        if: "github.event.pull_request.head.repo.fork"
        uses: actions/download-artifact@v4
        with:
          name: runtime-${{ inputs.image_tag }}
          path: /tmp
      - name: Load runtime image for fork
        if: "github.event.pull_request.head.repo.fork"
        run: |
          docker load --input /tmp/runtime-${{ inputs.image_tag }}.tar
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies
      - name: Run runtime tests
        run: |
          image_name=ghcr.io/${{ github.repository_owner }}/runtime:${{ github.sha }}-${{ inputs.image_tag }}
          image_name=$(echo $image_name | tr '[:upper:]' '[:lower:]')

          TEST_RUNTIME=eventstream \
          SANDBOX_USER_ID=$(id -u) \
          SANDBOX_BASE_CONTAINER_IMAGE=$image_name \
          TEST_IN_CI=true \
          poetry run pytest --cov=agenthub --cov=openhands --cov-report=xml -s ./tests/runtime
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Run integration tests with the runtime Docker image
  runtime_integration_tests_on_linux:
    name: Runtime Integration Tests with ${{ inputs.image_tag }}
    runs-on: ubuntu-latest
    needs: [ghcr_build_runtime]
    steps:
      - uses: actions/checkout@v4
      # Forked repos can't push to GHCR, so we need to download the image as an artifact
      - name: Download runtime image for fork
        if: "github.event.pull_request.head.repo.fork"
        uses: actions/download-artifact@v4
        with:
          name: runtime-${{ inputs.image_tag }}
          path: /tmp
      - name: Load runtime image for fork
        if: "github.event.pull_request.head.repo.fork"
        run: |
          docker load --input /tmp/runtime-${{ inputs.image_tag }}.tar
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: make install-python-dependencies
      - name: Run integration tests
        run: |
          image_name=ghcr.io/${{ github.repository_owner }}/runtime:${{ github.sha }}-${{ inputs.image_tag }}
          image_name=$(echo $image_name | tr '[:upper:]' '[:lower:]')

          TEST_RUNTIME=eventstream \
          SANDBOX_USER_ID=$(id -u) \
          SANDBOX_BASE_CONTAINER_IMAGE=$image_name \
          TEST_IN_CI=true \
          TEST_ONLY=true \
          ./tests/integration/regenerate.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Checks that all runtime tests have passed
  all_runtime_tests_passed:
    name: Runtime Tests Passed with ${{ inputs.image_tag }}
    runs-on: ubuntu-latest
    needs: [test_runtime, runtime_integration_tests_on_linux]
    steps:
      - name: All tests passed
        run: echo "All runtime tests have passed successfully!"

# Workflow that builds and tests the CLI binary executable
name: CLI - Build binary and optionally release

# Run on pushes to main branch and CLI tags, and on pull requests when CLI files change
on:
  push:
    branches:
      - main
    tags:
      - "*-cli"
  pull_request:
    paths:
      - "openhands-cli/**"

permissions:
  contents: write       # needed to create releases or upload assets

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ (github.head_ref && github.ref) || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-test-binary:
    name: Build and test binary executable
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            arch: x86_64
            platform: linux
          # Linux ARM64
          - os: ubuntu-latest-arm64
            arch: arm64
            platform: linux
          # macOS x86_64 (Intel)
          - os: macos-13
            arch: x86_64
            platform: macos
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            arch: arm64
            platform: macos
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        working-directory: openhands-cli
        run: |
          uv sync

      - name: Build binary executable
        working-directory: openhands-cli
        run: |
          # Set build arguments based on platform and architecture
          BUILD_ARGS="--install-pyinstaller"
          if [ "${{ matrix.platform }}" = "macos" ]; then
            BUILD_ARGS="$BUILD_ARGS --target-arch ${{ matrix.arch }}"
          fi

          echo "üî® Building with args: $BUILD_ARGS"
          ./build.sh $BUILD_ARGS | tee output.log
          echo "Full output:"
          cat output.log

          if grep -q "‚ùå" output.log; then
            echo "‚ùå Found failure marker in output"
            exit 1
          fi

          echo "‚úÖ Build & test finished without ‚ùå markers"

      - name: Upload binary artifact (for releases only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: openhands-cli-${{ matrix.platform }}-${{ matrix.arch }}
          path: openhands-cli/dist/openhands*
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-test-binary
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Rename binaries to include platform and architecture in filename
          for artifact_dir in artifacts/openhands-cli-*; do
            if [ -d "$artifact_dir" ]; then
              # Extract platform and arch from directory name
              # Format: openhands-cli-{platform}-{arch}
              dir_name=$(basename "$artifact_dir")
              platform_arch=${dir_name#openhands-cli-}

              if [ -f "$artifact_dir/openhands" ]; then
                cp "$artifact_dir/openhands" "release-assets/openhands-$platform_arch"
                echo "‚úÖ Copied $artifact_dir/openhands to release-assets/openhands-$platform_arch"
              else
                echo "‚ö†Ô∏è  No openhands binary found in $artifact_dir"
              fi
            fi
          done

          echo "üìÅ Release assets prepared:"
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

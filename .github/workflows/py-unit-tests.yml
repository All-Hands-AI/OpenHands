# Workflow that runs python unit tests
name: Run Python Unit Tests

# The jobs in this workflow are required, so they must run at all times
# * Always run on "main"
# * Always run on PRs
on:
  push:
    branches:
      - main
      - release
      - staging
  pull_request:
    branches:
      - main
      - release
      - staging

# If triggered by a PR, it will be in the same group. However, each commit on main will be in its own unique group
concurrency:
  group: ${{ github.workflow }}-${{ (github.head_ref && github.ref) || github.run_id }}
  cancel-in-progress: true

jobs:
  # Run python unit tests on Linux
  test-on-linux:
    name: Python Unit Tests on Linux
    runs-on: ubuntu-latest
    env:
      INSTALL_DOCKER: '0' # Set to '0' to skip Docker installation
      POETRY_VIRTUALENVS_IN_PROJECT: true
    strategy:
      matrix:
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Install tmux
        run: sudo apt-get update && sudo apt-get install -y tmux
      # - name: Setup Node.js
      #   uses: useblacksmith/setup-node@v5
      #   with:
      #     node-version: '22.x'
      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install poetry via pipx
        run: pipx install poetry
      - name: Set up Python
        uses: useblacksmith/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - name: Install Python dependencies using Poetry
        run: poetry install --without evaluation
      - name: Build Environment
        run: make build
      - name: Generate .env file
        run: cp .env.example .env
      - name: Run Tests
        run: poetry run pytest --forked -n auto -svv ./tests/unit -k "not test_storage and not test_json_encoder" && poetry run pytest tests/unit/test_storage.py tests/unit/test_json_encoder.py
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v5
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

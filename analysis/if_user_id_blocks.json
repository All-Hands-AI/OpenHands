[
  {
    "file": "openhands/runtime/utils/runtime_init.py",
    "line": 64,
    "header": "            if existing_user_id == user_id:",
    "body_uses_user_id": true,
    "body_preview": "                logger.debug(\n                    f'User `{username}` already has the provided UID {user_id}. Skipping user setup.'\n                )\n"
  },
  {
    "file": "openhands/resolver/issue_resolver.py",
    "line": 252,
    "header": "            if user_id == 0:",
    "body_uses_user_id": true,
    "body_preview": "                sandbox_config.user_id = get_unique_uid()\n\n"
  },
  {
    "file": "openhands/storage/locations.py",
    "line": 5,
    "header": "    if user_id:",
    "body_uses_user_id": true,
    "body_preview": "        return f'users/{user_id}/conversations/{sid}/'\n"
  },
  {
    "file": "openhands/storage/conversation/conversation_store.py",
    "line": 39,
    "header": "        if not metadata.user_id or metadata.user_id != user_id:",
    "body_uses_user_id": false,
    "body_preview": "            return False\n"
  },
  {
    "file": "openhands/server/routes/manage_conversations.py",
    "line": 674,
    "header": "        if user_id and metadata.user_id != user_id:",
    "body_uses_user_id": true,
    "body_preview": "            logger.warning(\n                f'User {user_id} attempted to update conversation {conversation_id} owned by {metadata.user_id}',\n                extra={'session_id': conversation_id, 'user_id': user_id},\n            )\n            return JSONResponse(\n                content={\n                    'status': 'error',\n                    'message': 'Permission denied: You can only update your own conversations',\n                    'msg_id': 'AUTHORIZATION$PERMISSION_DENIED',\n                },\n"
  },
  {
    "file": "openhands/server/routes/settings.py",
    "line": 62,
    "header": "                if provider_token.token or provider_token.user_id:",
    "body_uses_user_id": false,
    "body_preview": "                    provider_tokens_set[provider_type] = provider_token.host\n\n"
  },
  {
    "file": "openhands/server/conversation_manager/standalone_conversation_manager.py",
    "line": 95,
    "header": "        if not await session_exists(sid, self.file_store, user_id=user_id):",
    "body_uses_user_id": false,
    "body_preview": "            return None\n\n"
  },
  {
    "file": "openhands/server/conversation_manager/standalone_conversation_manager.py",
    "line": 257,
    "header": "        if user_id:",
    "body_uses_user_id": true,
    "body_preview": "            items = (item for item in items if item[1].user_id == user_id)\n\n"
  },
  {
    "file": "openhands/server/conversation_manager/standalone_conversation_manager.py",
    "line": 273,
    "header": "        if user_id:",
    "body_uses_user_id": true,
    "body_preview": "            for connection_id, sid in list(connections.items()):\n                session = self._local_agent_loops_by_sid.get(sid)\n                if not session or session.user_id != user_id:\n                    connections.pop(connection_id)\n"
  },
  {
    "file": "openhands/server/conversation_manager/standalone_conversation_manager.py",
    "line": 718,
    "header": "            if user_id and session.user_id != user_id:",
    "body_uses_user_id": false,
    "body_preview": "                continue\n"
  },
  {
    "file": "openhands/controller/state/state.py",
    "line": 137,
    "header": "            if user_id:",
    "body_uses_user_id": false,
    "body_preview": "                filename = get_conversation_agent_state_filename(sid)\n                try:\n                    file_store.delete(filename)\n                except Exception:\n                    pass\n"
  },
  {
    "file": "openhands/controller/state/state.py",
    "line": 164,
    "header": "            if user_id:",
    "body_uses_user_id": false,
    "body_preview": "                filename = get_conversation_agent_state_filename(sid)\n                encoded = file_store.read(filename)\n                pickled = base64.b64decode(encoded)\n                state = pickle.loads(pickled)\n"
  }
]

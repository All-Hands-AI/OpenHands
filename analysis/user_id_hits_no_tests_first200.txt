 - config.template.toml:288:#user_id = 1000
 - docs/openapi.json:3309:          "user_id": {
 - docs/usage/configuration-options.mdx:337:- `user_id`
 - openhands/cli/gui_launcher.py:179:                user_id = subprocess.check_output(['id', '-u'], text=True).strip()
 - openhands/cli/gui_launcher.py:180:                docker_cmd.extend(['-e', f'SANDBOX_USER_ID={user_id}'])
 - openhands/cli/main.py:103:        event_stream.user_id,
 - openhands/cli/main.py:596:    settings_store = await FileSettingsStore.get_instance(config=config, user_id=None)
 - openhands/controller/agent_controller.py:126:        user_id: str | None = None,
 - openhands/controller/agent_controller.py:155:        self.user_id = user_id
 - openhands/controller/agent_controller.py:171:        self.state_tracker = StateTracker(sid, file_store, user_id)
 - openhands/controller/agent_controller.py:719:            user_id=self.user_id,
 - openhands/controller/agent_controller.py:740:            user_id=self.user_id,
 - openhands/controller/state/state.py:82:    user_id: str | None = None
 - openhands/controller/state/state.py:123:        self, sid: str, file_store: FileStore, user_id: str | None
 - openhands/controller/state/state.py:133:                get_conversation_agent_state_filename(sid, user_id), encoded
 - openhands/controller/state/state.py:137:            if user_id:
 - openhands/controller/state/state.py:151:        sid: str, file_store: FileStore, user_id: str | None = None
 - openhands/controller/state/state.py:157:                get_conversation_agent_state_filename(sid, user_id)
 - openhands/controller/state/state.py:162:            # if user_id is provided, we are in a saas/remote use case
 - openhands/controller/state/state.py:164:            if user_id:
 - openhands/controller/state/state.py:277:            'trace_user_id': self.user_id,
 - openhands/controller/state/state_tracker.py:32:        self, sid: str | None, file_store: FileStore | None, user_id: str | None
 - openhands/controller/state/state_tracker.py:36:        self.user_id = user_id
 - openhands/controller/state/state_tracker.py:75:                user_id=self.user_id,
 - openhands/controller/state/state_tracker.py:249:            self.state.save_to_session(self.sid, self.file_store, self.user_id)
 - openhands/core/config/mcp_config.py:337:        host: str, config: 'OpenHandsConfig', user_id: str | None = None
 - openhands/core/config/mcp_config.py:344:            user_id: Optional user ID for the MCP server
 - openhands/core/config/sandbox_config.py:16:        user_id: The user ID for the sandbox.
 - openhands/core/config/sandbox_config.py:59:    user_id: int = Field(default=os.getuid() if hasattr(os, 'getuid') else 1000)
 - openhands/core/config/sandbox_config.py:60:    logger.debug(f'SandboxConfig user_id default: {user_id}')
 - openhands/core/main.py:225:            event_stream.sid, event_stream.file_store, event_stream.user_id
 - openhands/events/event_store.py:49:    user_id: str | None
 - openhands/events/event_store.py:69:            events_dir = get_conversation_events_dir(self.sid, self.user_id)
 - openhands/events/event_store.py:139:        filename = self._get_filename_for_id(id, self.user_id)
 - openhands/events/event_store.py:155:    def _get_filename_for_id(self, id: int, user_id: str | None) -> str:
 - openhands/events/event_store.py:156:        return get_conversation_event_filename(self.sid, id, user_id)
 - openhands/events/event_store.py:159:        return f'{get_conversation_dir(self.sid, self.user_id)}event_cache/{start}-{end}.json'
 - openhands/events/event_store_abc.py:15:    user_id: str | None
 - openhands/events/nested_event_store.py:20:    user_id: str | None
 - openhands/events/stream.py:34:    sid: str, file_store: FileStore, user_id: str | None = None
 - openhands/events/stream.py:37:        await call_sync_from_async(file_store.list, get_conversation_dir(sid, user_id))
 - openhands/events/stream.py:56:    def __init__(self, sid: str, file_store: FileStore, user_id: str | None = None):
 - openhands/events/stream.py:57:        super().__init__(sid, file_store, user_id)
 - openhands/events/stream.py:189:            filename = self._get_filename_for_id(event.id, self.user_id)
 - openhands/events/stream.py:194:                        'user_id': self.user_id,
 - openhands/experiments/experiment_manager.py:34:        user_id: str, conversation_id: str, conversation_settings: ConversationInitData
 - openhands/experiments/experiment_manager.py:40:        user_id: str, conversation_id: str, config: OpenHandsConfig
 - openhands/integrations/bitbucket/bitbucket_service.py:40:        user_id: str | None = None,
 - openhands/integrations/bitbucket/bitbucket_service.py:47:        self.user_id = user_id
 - openhands/integrations/github/github_service.py:49:        user_id: str | None = None,
 - openhands/integrations/github/github_service.py:56:        self.user_id = user_id
 - openhands/integrations/github/service/features.py:85:                    'user_id': self.external_auth_id,
 - openhands/integrations/github/service/features.py:116:                    'user_id': self.external_auth_id,
 - openhands/integrations/gitlab/gitlab_service.py:47:        user_id: str | None = None,
 - openhands/integrations/gitlab/gitlab_service.py:54:        self.user_id = user_id
 - openhands/integrations/provider.py:43:    user_id: str | None = Field(default=None)
 - openhands/integrations/provider.py:62:            user_id = token_value.get('user_id')
 - openhands/integrations/provider.py:64:            return cls(token=SecretStr(token_str), user_id=user_id, host=host)
 - openhands/integrations/provider.py:154:            user_id=token.user_id,
 - openhands/integrations/service_types.py:442:        user_id: str | None = None,
 - openhands/resolver/issue_resolver.py:251:            user_id = os.getuid() if hasattr(os, 'getuid') else 1000
 - openhands/resolver/issue_resolver.py:252:            if user_id == 0:
 - openhands/resolver/issue_resolver.py:253:                sandbox_config.user_id = get_unique_uid()
 - openhands/resolver/issue_resolver.py:265:        openhands_config.sandbox.user_id = sandbox_config.user_id
 - openhands/runtime/action_execution_server.py:176:        user_id: int,
 - openhands/runtime/action_execution_server.py:183:        self.user_id = user_id
 - openhands/runtime/action_execution_server.py:185:            username=username, user_id=self.user_id, initial_cwd=work_dir
 - openhands/runtime/action_execution_server.py:188:            self.user_id = _updated_user_id
 - openhands/runtime/action_execution_server.py:553:                os.chown(filepath, self.user_id, self.user_id)
 - openhands/runtime/action_execution_server.py:700:            user_id=args.user_id,
 - openhands/runtime/base.py:139:        user_id: str | None = None,
 - openhands/runtime/base.py:172:            external_auth_id=user_id,
 - openhands/runtime/base.py:191:        self.user_id = user_id
 - openhands/runtime/base.py:336:            external_auth_id=self.user_id,
 - openhands/runtime/base.py:901:                    self.sid, self.event_stream.user_id
 - openhands/runtime/impl/action_execution/action_execution_client.py:79:        user_id: str | None = None,
 - openhands/runtime/impl/action_execution/action_execution_client.py:97:            user_id,
 - openhands/runtime/impl/cli/cli_runtime.py:103:        user_id (str | None, optional): User ID for authentication. Defaults to None.
 - openhands/runtime/impl/cli/cli_runtime.py:118:        user_id: str | None = None,
 - openhands/runtime/impl/cli/cli_runtime.py:131:            user_id,
 - openhands/runtime/impl/docker/docker_runtime.py:101:        user_id: str | None = None,
 - openhands/runtime/impl/docker/docker_runtime.py:155:            user_id,
 - openhands/runtime/impl/kubernetes/kubernetes_runtime.py:92:        user_id: str | None = None,
 - openhands/runtime/impl/kubernetes/kubernetes_runtime.py:149:            user_id,
 - openhands/runtime/impl/local/local_runtime.py:146:        user_id: str | None = None,
 - openhands/runtime/impl/local/local_runtime.py:198:            user_id,
 - openhands/runtime/impl/local/local_runtime.py:659:    user_id, username = get_user_info()
 - openhands/runtime/impl/local/local_runtime.py:668:        override_user_id=user_id,
 - openhands/runtime/impl/remote/remote_runtime.py:62:        user_id: str | None = None,
 - openhands/runtime/impl/remote/remote_runtime.py:76:            user_id,
 - openhands/runtime/impl/remote/remote_runtime.py:79:        logger.debug(f'RemoteRuntime.init user_id {user_id}')
 - openhands/runtime/utils/command.py:46:    user_id = override_user_id or (1000 if app_config.run_as_openhands else 0)
 - openhands/runtime/utils/command.py:61:        str(user_id),
 - openhands/runtime/utils/runtime_init.py:9:    username: str, user_id: int, initial_cwd: str
 - openhands/runtime/utils/runtime_init.py:20:        - If the UID differs, it logs a warning and return an updated user_id.
 - openhands/runtime/utils/runtime_init.py:30:        user_id (int): The user ID to assign to the user.
 - openhands/runtime/utils/runtime_init.py:55:        logger.debug(f'Attempting to create user `{username}` with UID {user_id}.')
 - openhands/runtime/utils/runtime_init.py:64:            if existing_user_id == user_id:
 - openhands/runtime/utils/runtime_init.py:66:                    f'User `{username}` already has the provided UID {user_id}. Skipping user setup.'
 - openhands/runtime/utils/runtime_init.py:95:            f'-g root -G sudo -u {user_id} {username}'
 - openhands/runtime/utils/runtime_init.py:100:                f'Added user `{username}` successfully with UID {user_id}. Output: [{output.stdout.decode()}]'
 - openhands/runtime/utils/runtime_init.py:104:                f'Failed to create user `{username}` with UID {user_id}. Output: [{output.stderr.decode()}]'
 - openhands/server/conversation_manager/conversation_manager.py:61:        self, sid: str, user_id: str | None = None
 - openhands/server/conversation_manager/conversation_manager.py:75:        user_id: str | None,
 - openhands/server/conversation_manager/conversation_manager.py:86:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/conversation_manager.py:92:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/conversation_manager.py:101:        user_id: str | None,
 - openhands/server/conversation_manager/conversation_manager.py:136:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:71:        self, sid: str, user_id: str | None = None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:85:        user_id: str | None,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:91:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:110:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:120:        user_id: str | None,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:126:                sid, settings, user_id, initial_user_msg, replay_json
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:138:                user_id=user_id,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:152:        user_id: str | None,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:157:        await self.ensure_num_conversations_below_limit(sid, user_id)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:158:        runtime = await self._create_runtime(sid, user_id, settings)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:225:                            'user_id': v.user_id,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:385:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:419:                    user_id=user_id,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:458:    async def _get_conversation_store(self, user_id: str | None) -> ConversationStore:
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:465:        store = await conversation_store_class.get_instance(self.config, user_id)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:491:        self, sid: str, user_id: str | None
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:493:        response_ids = await self.get_running_agent_loops(user_id)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:496:                f'too_many_sessions_for:{user_id or ""}',
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:497:                extra={'session_id': sid, 'user_id': user_id},
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:500:            conversation_store = await self._get_conversation_store(user_id)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:507:                    f'closing_from_too_many_sessions:{user_id or ""}:{oldest_conversation_id}',
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:508:                    extra={'session_id': oldest_conversation_id, 'user_id': user_id},
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:535:        self, sid: str, user_id: str | None, settings: Settings
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:541:            user_id, sid, self.config
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:545:            create_registry_and_conversation_stats(config, sid, user_id, settings)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:555:            user_id=user_id,
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:584:        conversation_dir = get_conversation_dir(sid, user_id)
 - openhands/server/conversation_manager/docker_nested_conversation_manager.py:602:        event_stream = EventStream(sid, self.file_store, user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:92:        self, sid: str, user_id: str | None = None
 - openhands/server/conversation_manager/standalone_conversation_manager.py:95:        if not await session_exists(sid, self.file_store, user_id=user_id):
 - openhands/server/conversation_manager/standalone_conversation_manager.py:130:                user_id=user_id,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:156:        user_id: str | None,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:160:            extra={'session_id': sid, 'user_id': user_id},
 - openhands/server/conversation_manager/standalone_conversation_manager.py:164:        agent_loop_info = await self.maybe_start_agent_loop(sid, settings, user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:230:    async def _get_conversation_store(self, user_id: str | None) -> ConversationStore:
 - openhands/server/conversation_manager/standalone_conversation_manager.py:237:        store = await conversation_store_class.get_instance(self.config, user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:241:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/standalone_conversation_manager.py:257:        if user_id:
 - openhands/server/conversation_manager/standalone_conversation_manager.py:258:            items = (item for item in items if item[1].user_id == user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:264:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/standalone_conversation_manager.py:273:        if user_id:
 - openhands/server/conversation_manager/standalone_conversation_manager.py:276:                if not session or session.user_id != user_id:
 - openhands/server/conversation_manager/standalone_conversation_manager.py:284:        user_id: str | None,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:292:                sid, settings, user_id, initial_user_msg, replay_json
 - openhands/server/conversation_manager/standalone_conversation_manager.py:300:        user_id: str | None,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:306:        response_ids = await self.get_running_agent_loops(user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:309:                f'too_many_sessions_for:{user_id or ""}',
 - openhands/server/conversation_manager/standalone_conversation_manager.py:310:                extra={'session_id': sid, 'user_id': user_id},
 - openhands/server/conversation_manager/standalone_conversation_manager.py:313:            conversation_store = await self._get_conversation_store(user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:320:                    f'closing_from_too_many_sessions:{user_id or ""}:{oldest_conversation_id}',
 - openhands/server/conversation_manager/standalone_conversation_manager.py:321:                    extra={'session_id': oldest_conversation_id, 'user_id': user_id},
 - openhands/server/conversation_manager/standalone_conversation_manager.py:341:            create_registry_and_conversation_stats(self.config, sid, user_id, settings)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:350:            user_id=user_id,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:361:                    user_id, sid, settings, session.llm_registry
 - openhands/server/conversation_manager/standalone_conversation_manager.py:475:        user_id: str | None,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:484:                user_id,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:495:        user_id: str,
 - openhands/server/conversation_manager/standalone_conversation_manager.py:501:        conversation_store = await self._get_conversation_store(user_id)
 - openhands/server/conversation_manager/standalone_conversation_manager.py:538:                conversation_id, user_id, self.file_store, settings, llm_registry
 - openhands/server/conversation_manager/standalone_conversation_manager.py:714:        self, user_id: str | None = None, filter_to_sids: set[str] | None = None
 - openhands/server/conversation_manager/standalone_conversation_manager.py:718:            if user_id and session.user_id != user_id:
 - openhands/server/listen_socket.py:71:        user_id = await conversation_validator.validate(
 - openhands/server/listen_socket.py:75:            f'User {user_id} is allowed to connect to conversation {conversation_id}'
 - openhands/server/listen_socket.py:80:                conversation_id, conversation_manager.file_store, user_id
 - openhands/server/listen_socket.py:121:            user_id, conversation_id, providers_set
 - openhands/server/listen_socket.py:128:            user_id,
 - openhands/server/routes/conversation.py:114:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/conversation.py:126:        user_id: User ID (injected by dependency)
 - openhands/server/routes/conversation.py:145:        user_id=user_id,
 - openhands/server/routes/files.py:233:    user_id: str = Depends(get_user_id),
 - openhands/server/routes/git.py:43:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:49:            external_auth_id=user_id,
 - openhands/server/routes/git.py:74:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:80:            external_auth_id=user_id,
 - openhands/server/routes/git.py:100:        f'Returning 401 Unauthorized - Git provider token required for user_id: {user_id}'
 - openhands/server/routes/git.py:109:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:127:        f'Returning 401 Unauthorized - Git provider token required for user_id: {user_id}'
 - openhands/server/routes/git.py:141:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:147:            external_auth_id=user_id,
 - openhands/server/routes/git.py:162:        f'Returning 401 Unauthorized - Git provider token required for user_id: {user_id}'
 - openhands/server/routes/git.py:175:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:181:            external_auth_id=user_id,
 - openhands/server/routes/git.py:202:        f'Returning 401 Unauthorized - Git provider token required for user_id: {user_id}'
 - openhands/server/routes/git.py:214:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:235:    logger.info(f'Returning 401 Unauthorized - No providers set for user_id: {user_id}')
 - openhands/server/routes/git.py:246:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:275:        f'Returning 401 Unauthorized - Git provider token required for user_id: {user_id}'
 - openhands/server/routes/git.py:300:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:316:        user_id: User ID for authentication
 - openhands/server/routes/git.py:327:            external_auth_id=user_id,
 - openhands/server/routes/git.py:366:    user_id: str | None = Depends(get_user_id),
 - openhands/server/routes/git.py:375:        user_id: User ID for authentication

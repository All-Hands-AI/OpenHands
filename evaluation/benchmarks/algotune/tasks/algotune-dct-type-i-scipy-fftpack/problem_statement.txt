Apart from the default Python packages, you have access to the following additional packages:
- cryptography
- cvxpy
- cython
- dace
- dask
- diffrax
- ecos
- faiss-cpu
- hdbscan
- highspy
- jax
- networkx
- numba
- numpy
- ortools
- pandas
- pot
- psutil
- pulp
- pyomo
- python-sat
- pythran
- scikit-learn
- scipy
- sympy
- torch

Your objective is to define a class named `Solver` in `/workspace/solver.py` with a method:
```python
class Solver:
    def solve(self, problem, **kwargs) -> Any:
        # Your implementation goes here.
        ...
```

IMPORTANT: Compilation time of your init function will not count towards your function's runtime.

This `solve` function will be the entrypoint called by the evaluation harness. Strive to align your class and method implementation as closely as possible with the desired performance criteria.
For each instance, your function can run for at most 10x the reference runtime for that instance. Strive to have your implementation run as fast as possible, while returning the same output as the reference function (for the same given input). Be creative and optimize your approach!

**GOALS:**
Your primary objective is to optimize the `solve` function to run as as fast as possible, while returning the optimal solution.
You will receive better scores the quicker your solution runs, and you will be penalized for exceeding the time limit or returning non-optimal solutions.

Below you find the description of the task you will have to solve. Read it carefully and understand what the problem is and what your solver should do.

**TASK DESCRIPTION:**

Task: dct_type_I_scipy_fftpack

Concise description:
This task involves computing the Discrete Cosine Transform (DCT) Type I of a set of numbers arranged in a grid.  
In DCT Type I, the data is assumed to be even-symmetric at the boundaries, meaning the values mirror at the edges.  
This symmetry requires the grid to have one extra row and column compared to the logical size.  
The output is a two-dimensional array (of size (n+1)×(n+1)) where each element represents a cosine frequency coefficient.  
The output grid captures the frequency content of the original data through these coefficients.

Input:
A real-valued (n+1)×(n+1) array.

Example input:
[[0.2, 0.5, 0.7],
 [0.3, 0.8, 0.6],
 [0.9, 0.4, 0.1]]

Output:
A (n+1)×(n+1) array of real numbers indicating the cosine frequency coefficients.

Example output:
[[...], [...], [...]]

Category: signal_processing

Below is the reference implementation. Your function should run much quicker.

```python
def solve(self, problem: NDArray) -> NDArray:
        """
        Compute the N-dimensional DCT Type I using scipy.fftpack.
        """
        result = scipy.fftpack.dctn(problem, type=1)
        return result
```

This function will be used to check if your solution is valid for a given problem. If it returns False, it means the solution is invalid:

```python
def is_solution(self, problem: NDArray, solution: NDArray) -> bool:
        """
        Check if the DCT Type I solution is valid and optimal.

        A valid solution must match the reference implementation (scipy.fftpack.dctn)
        within a small tolerance.

        :param problem: Input array.
        :param solution: Computed DCT result.
        :return: True if the solution is valid and optimal, False otherwise.
        """
        tol = 1e-6
        reference = scipy.fftpack.dctn(problem, type=1)
        error = np.linalg.norm(solution - reference) / (np.linalg.norm(reference) + 1e-12)
        if error > tol:
            logging.error(f"DCT solution error {error} exceeds tolerance {tol}.")
            return False
        return True
```

You can use python test_outputs.py to check the current speedup of reference solver.
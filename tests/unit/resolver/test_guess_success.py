from unittest.mock import MagicMock

from openhands.core.config import LLMConfig
from openhands.events.action.message import MessageAction
from openhands.llm import LLM
from openhands.resolver.github_issue import GithubIssue
from openhands.resolver.issue_definitions import IssueHandler


class MockLLMResponse:
    """Mock LLM Response class to mimic the actual LLM response structure."""

    class Choice:
        class Message:
            def __init__(self, content):
                self.content = content

        def __init__(self, content):
            self.message = self.Message(content)

    def __init__(self, content):
        self.choices = [self.Choice(content)]


def test_guess_success_multiline_explanation():
    # Mock data
    issue = GithubIssue(
        owner='test',
        repo='test',
        number=1,
        title='Test Issue',
        body='Test body',
        thread_comments=None,
        review_comments=None,
    )
    history = [MessageAction(content='Test message')]
    llm_config = LLMConfig(model='test', api_key='test')

    # Create a mock response with multi-line explanation
    mock_response = """--- success
true

--- explanation
The PR successfully addressed the issue by:
- Fixed bug A
- Added test B
- Updated documentation C

Automatic fix generated by OpenHands ðŸ™Œ"""

    # Mock the litellm.completion call
    mock_llm = MagicMock(spec=LLM)
    mock_llm.completion.return_value = MockLLMResponse(mock_response)

    # Create a handler instance
    llm_config = LLMConfig(model='test', api_key='test')
    handler = IssueHandler('test', 'test', 'test', llm_config)
    handler.llm = mock_llm

    # Call guess_success
    success, _, explanation = handler.guess_success(issue, history)

    # Verify the results
    assert success is True
    assert 'The PR successfully addressed the issue by:' in explanation
    assert 'Fixed bug A' in explanation
    assert 'Added test B' in explanation
    assert 'Updated documentation C' in explanation
    assert 'Automatic fix generated by OpenHands' in explanation

    mock_llm.completion.assert_called_once()

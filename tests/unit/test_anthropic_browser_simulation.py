import os
from unittest.mock import MagicMock, patch

import litellm
import numpy as np
import pytest
from PIL import Image

from openhands.events.observation.browse import BrowserOutputObservation
from openhands.runtime.browser.base64 import image_to_png_base64_url


def create_test_image():
    """Create a simple test image."""
    # Create a simple 10x10 RGB image
    img_array = np.zeros((10, 10, 3), dtype=np.uint8)
    img_array[:, :, 0] = 255  # Red channel
    return Image.fromarray(img_array)


def test_browser_env_screenshot_format():
    """Test the format of screenshots generated by the browser environment."""
    # Create a test image
    test_image = create_test_image()

    # Convert to PNG base64 URL (this is what happens in the browser environment)
    screenshot = image_to_png_base64_url(test_image, add_data_prefix=True)

    # Verify the format
    assert screenshot.startswith('data:image/png;base64,'), (
        f"Expected 'data:image/png;base64,' but got {screenshot[:30]}..."
    )

    # Create a BrowserOutputObservation with the screenshot
    observation = BrowserOutputObservation(
        content='Test content',
        url='https://example.com',
        screenshot=screenshot,
        trigger_by_action='browse_interactive',
    )

    # Verify the screenshot in the observation
    assert observation.screenshot == screenshot, (
        "Screenshot in observation doesn't match original screenshot"
    )

    # This assertion would fail if we expected JPEG format
    assert not observation.screenshot.startswith('data:image/jpeg;base64,'), (
        'Screenshot should not be in JPEG format'
    )


def test_anthropic_with_browser_observation():
    """Test sending a browser observation to Anthropic API."""
    import litellm

    # Skip this test if no Anthropic API key is available
    api_key = os.environ.get('ANTHROPIC_API_KEY')
    if not api_key:
        pytest.skip('No Anthropic API key available')

    # Create a test image
    test_image = create_test_image()
    screenshot = image_to_png_base64_url(test_image, add_data_prefix=True)

    # Create a BrowserOutputObservation with the screenshot
    observation = BrowserOutputObservation(
        content='Test content',
        url='https://example.com',
        screenshot=screenshot,
        trigger_by_action='browse_interactive',
    )

    # Create a message with the observation
    formatted_messages = [
        {
            'role': 'user',
            'content': [
                {'type': 'text', 'text': observation.get_agent_obs_text()},
                {'type': 'image_url', 'image_url': {'url': observation.screenshot}},
            ],
        }
    ]

    # Try to call the Anthropic API
    response = litellm.completion(
        model='anthropic/claude-3-opus-20240229',
        messages=formatted_messages,
        api_key=api_key,
        max_tokens=100,  # Limit response size for faster test
    )

    # Verify we got a response
    assert response is not None
    assert response.choices[0].message.content is not None

    # Print the response for debugging
    print(f'Response from Anthropic: {response.choices[0].message.content}')


@patch('litellm.completion')
def test_browser_env_with_anthropic(mock_completion):
    """Test the browser environment with Anthropic."""
    # Configure the mock to simulate the real behavior
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message = MagicMock()
    mock_response.choices[0].message.content = 'This is a test response'
    mock_completion.return_value = mock_response

    # Create a test image
    test_image = create_test_image()

    # Directly convert the image to PNG base64 URL (simulating what happens in browser_env.py)
    screenshot = image_to_png_base64_url(test_image, add_data_prefix=True)

    # Verify the screenshot format
    assert screenshot.startswith('data:image/png;base64,'), (
        f"Expected 'data:image/png;base64,' but got {screenshot[:30]}..."
    )

    # Create a BrowserOutputObservation with the screenshot
    observation = BrowserOutputObservation(
        content='Test content',
        url='https://example.com',
        screenshot=screenshot,
        trigger_by_action='browse_interactive',
    )

    # Create a message with the observation
    formatted_messages = [
        {
            'role': 'user',
            'content': [
                {'type': 'text', 'text': observation.get_agent_obs_text()},
                {'type': 'image_url', 'image_url': {'url': observation.screenshot}},
            ],
        }
    ]

    # Try to call the Anthropic API through litellm
    response = litellm.completion(
        model='anthropic/claude-3-opus-20240229',
        messages=formatted_messages,
        api_key='fake_api_key',  # Using mock, so API key doesn't matter
    )

    # Verify the mock was called with the correct arguments
    mock_completion.assert_called_once()
    call_args = mock_completion.call_args[1]
    assert call_args['model'] == 'anthropic/claude-3-opus-20240229'
    assert call_args['messages'] == formatted_messages

    # Verify we got a response
    assert response is not None
    assert response.choices[0].message.content == 'This is a test response'

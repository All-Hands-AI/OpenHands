

----------

# Task
You are a responsible software engineer and always write good commit messages.

Please analyze the diff in the staging area, understand the context and content
of the updates from the diff only. Identify key elements like:
- Which files are affected?
- What types of changes were made (e.g., new features, bug fixes, refactoring, documentation, testing)?

Then you should generate a commit message that succinctly summarizes the staged
changes. The commit message should include:
- A summary line that clearly states the purpose of the changes.
- Optionally, a detailed description if the changes are complex or need further explanation.

You should find the diff using `git diff --cached`, compile a commit message,
and call the `finish` action with `outputs.answer` set to the answer. If current
repo is not a valid git repo, or there is no diff in the staging area, please call
the `reject` action.

## History
Here is a recent history of actions you've taken in service of this plan,
as well as observations you've made. This only includes the MOST RECENT
actions and observations--more may have happened before that.
They are time-ordered, with your most recent action at the bottom.

[[{"source": "agent", "action": "run", "args": {"command": "git diff --cached", "background": false, "thought": ""}}, {"source": "agent", "observation": "run", "content": "error: unknown option `cached'\r\nusage: git diff --no-index [<options>] <path> <path>\r\n\r\nDiff output format options\r\n    -p, --patch           generate patch\r\n    -s, --no-patch        suppress diff output\r\n    -u                    generate patch\r\n    -U, --unified[=<n>]   generate diffs with <n> lines context\r\n    -W, --function-context\r\n                          generate diffs with <n> lines context\r\n    --raw                 generate the diff in raw format\r\n    --patch-with-raw      synonym for '-p --raw'\r\n    --patch-with-stat     synonym for '-p --stat'\r\n    --numstat             machine friendly --stat\r\n    --shortstat           output only the last line of --stat\r\n    -X, --dirstat[=<param1,param2>...]\r\n                          output the distribution of relative amount of changes for each sub-directory\r\n    --cumulative          synonym for --dirstat=cumulative\r\n    --dirstat-by-file[=<param1,param2>...]\r\n                          synonym for --dirstat=files,param1,param2...\r\n    --check               warn if changes introduce conflict markers or whitespace errors\r\n    --summary             condensed summary such as creations, renames and mode changes\r\n    --name-only           show only names of changed files\r\n    --name-status         show only names and status of changed files\r\n    --stat[=<width>[,<name-width>[,<count>]]]\r\n                          generate diffstat\r\n    --stat-width <width>  generate diffstat with a given width\r\n    --stat-name-width <width>\r\n                          generate diffstat with a given name width\r\n    --stat-graph-width <width>\r\n                          generate diffstat with a given graph width\r\n    --stat-count <count>  generate diffstat with limited lines\r\n    --compact-summary     generate compact summary in diffstat\r\n    --binary              output a binary diff that can be applied\r\n    --full-index          show full pre- and post-image object names on the \"index\" lines\r\n    --color[=<when>]      show colored diff\r\n    --ws-error-highlight <kind>\r\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\r\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\r\n    --abbrev[=<n>]        use <n> digits to display object names\r\n    --src-prefix <prefix>\r\n                          show the given source prefix instead of \"a/\"\r\n    --dst-prefix <prefix>\r\n                          show the given destination prefix instead of \"b/\"\r\n    --line-prefix <prefix>\r\n                          prepend an additional prefix to every line of output\r\n    --no-prefix           do not show any source or destination prefix\r\n    --inter-hunk-context <n>\r\n                          show context between diff hunks up to the specified number of lines\r\n    --output-indicator-new <char>\r\n                          specify the character to indicate a new line instead of '+'\r\n    --output-indicator-old <char>\r\n                          specify the character to indicate an old line instead of '-'\r\n    --output-indicator-context <char>\r\n                          specify the character to indicate a context instead of ' '\r\n\r\nDiff rename options\r\n    -B, --break-rewrites[=<n>[/<m>]]\r\n                          break complete rewrite changes into pairs of delete and create\r\n    -M, --find-renames[=<n>]\r\n                          detect renames\r\n    -D, --irreversible-delete\r\n                          omit the preimage for deletes\r\n    -C, --find-copies[=<n>]\r\n                          detect copies\r\n    --find-copies-harder  use unmodified files as source to find copies\r\n    --no-renames          disable rename detection\r\n    --rename-empty        use empty blobs as rename source\r\n    --follow              continue listing the history of a file beyond renames\r\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\r\n\r\nDiff algorithm options\r\n    --minimal             produce the smallest possible diff\r\n    -w, --ignore-all-space\r\n                          ignore whitespace when comparing lines\r\n    -b, --ignore-space-change\r\n                          ignore changes in amount of whitespace\r\n    --ignore-space-at-eol\r\n                          ignore changes in whitespace at EOL\r\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\r\n    --ignore-blank-lines  ignore changes whose lines are all blank\r\n    -I, --ignore-matching-lines <regex>\r\n                          ignore changes whose all lines match <regex>\r\n    --indent-heuristic    heuristic to shift diff hunk boundaries for easy reading\r\n    --patience            generate diff using the \"patience diff\" algorithm\r\n    --histogram           generate diff using the \"histogram diff\" algorithm\r\n    --diff-algorithm <algorithm>\r\n                          choose a diff algorithm\r\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\r\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\r\n    --word-diff-regex <regex>\r\n                          use <regex> to decide what a word is\r\n    --color-words[=<regex>]\r\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\r\n    --color-moved[=<mode>]\r\n                          moved lines of code are colored differently\r\n    --color-moved-ws <mode>\r\n                          how white spaces are ignored in --color-moved\r\n\r\nOther diff options\r\n    --relative[=<prefix>]\r\n                          when run from subdir, exclude changes outside and show relative paths\r\n    -a, --text            treat all files as text\r\n    -R                    swap two inputs, reverse the diff\r\n    --exit-code           exit with 1 if there were differences, 0 otherwise\r\n    --quiet               disable all output of the program\r\n    --ext-diff            allow an external diff helper to be executed\r\n    --textconv            run external text conversion filters when comparing binary files\r\n    --ignore-submodules[=<when>]\r\n                          ignore changes to submodules in the diff generation\r\n    --submodule[=<format>]\r\n                          specify how differences in submodules are shown\r\n    --ita-invisible-in-index\r\n                          hide 'git add -N' entries from the index\r\n    --ita-visible-in-index\r\n                          treat 'git add -N' entries as real in the index\r\n    -S <string>           look for differences that change the number of occurrences of the specified string\r\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\r\n    --pickaxe-all         show all changes in the changeset with -S or -G\r\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\r\n    -O <file>             control the order in which files appear in the output\r\n    --rotate-to <path>    show the change in the specified path first\r\n    --skip-to <path>      skip the output to the specified path\r\n    --find-object <object-id>\r\n                          look for differences that change the number of occurrences of the specified object\r\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\r\n                          select files by diff type\r\n    --output <file>       Output to a specific file\r\n", "extras": {"command_id": -1, "command": "git diff --cached", "exit_code": 129}}]]

If the last item in the history is an error, you should try to fix it.

## Available Actions
* `run` - runs a command on the command line in a Linux shell. Arguments:
  * `command` - the command to run
  * `background` - if true, run the command in the background, so that other commands can be run concurrently. Useful for e.g. starting a server. You won't be able to see the logs. You don't need to end the command with `&`, just set this to true.

* `reject` - reject the task. Arguments:
  * `outputs` - a dictionary with only a `reason` attribute

* `finish` - if you're absolutely certain that you've completed your task, use the finish action to stop working. Arguments:
  * `outputs` - a dictionary representing the outputs of your task, if any


## Format
Your response MUST be in JSON format. It must be an object, and it must contain two fields:
* `action`, which is one of the actions specified here
* `args`, which is a map of key-value pairs, specifying the arguments for that action

You MUST NOT include any other text besides the JSON response
